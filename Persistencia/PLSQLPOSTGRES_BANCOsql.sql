/*===========================================================================================================*/
/*==============================DATOS Y OPERACIONES BANCO EN POSTGRES SQL=================================*/
/*===========================================================================================================*/


/*PROCEDIMIENTO QUE REGISTRA PROGRAMACIÓN DIARIA*/

INSERT INTO BANCO VALUES ('BANCO1','BANCO MARITIMO');

INSERT INTO CLIENTE VALUES(1000000,'CRN','CANAL DE PANAMA',NULL,'cp@cp.com');
INSERT INTO CLIENTE VALUES(3644435584,'CRN','CIAEXPLORER',NULL,NULL);
INSERT INTO CLIENTE VALUES(1167313117,'CRN','ALASKAENTERPRISE',NULL,NULL);
INSERT INTO CLIENTE VALUES(1380710879,'CRN','COSCOSHIPPING',NULL,NULL);

INSERT INTO CUENTA VALUES('C01',1000000,'CRN','BANCO1',0);
INSERT INTO CUENTA VALUES('C02',3644435584,'CRN','BANCO1',1000000);
INSERT INTO CUENTA VALUES('C03',1167313117,'CRN','BANCO1',1000000);
INSERT INTO CUENTA VALUES('C04',1380710879,'CRN','BANCO1',1000000);

CREATE OR REPLACE FUNCTION FU_PAGAR(PK_CRN CLIENTE.K_IDENTIFICACION%TYPE,PV_PAGAR CUENTA.V_SALDO%TYPE)
RETURNS BOOLEAN AS
$$
DECLARE
    L_CONFIRMACION BOOLEAN:=FALSE;
    LV_SALDO CUENTA.V_SALDO%TYPE;
    LK_CUENTA CUENTA.K_CUENTA%TYPE;
BEGIN

SELECT C.V_SALDO, C.K_CUENTA
INTO LV_SALDO, LK_CUENTA
FROM CUENTA C
WHERE C.K_IDENTIFICACION = PK_CRN
AND C.K_TIPOID = 'CRN';

IF PV_PAGAR > LV_SALDO THEN
    RAISE NOTICE 'Saldo insuficiente'; 
ELSE
    INSERT INTO TRANSACCION VALUES (DEFAULT,LK_CUENTA,'C01',PV_PAGAR,current_date);
    --SE ACTUALIZA EL SALDO CLIENTE
    UPDATE CUENTA
    SET V_SALDO = LV_SALDO-PV_PAGAR
    WHERE K_CUENTA=LK_CUENTA;
    --SE ACTUALIZA SALDO CANAL DE PANAMA
    UPDATE CUENTA
    SET V_SALDO = (SELECT V_SALDO FROM CUENTA WHERE K_CUENTA = 'C01') + PV_PAGAR
    WHERE K_CUENTA='C01';
    L_CONFIRMACION:=TRUE;
END IF;

RETURN L_CONFIRMACION;
END;
$$
LANGUAGE 'plpgsql';


--CONSULTA QUE RETORNA CUENTA DE ORIGEN - 1167313117 
SELECT C.K_CUENTA
FROM CUENTA C
WHERE C.K_IDENTIFICACION = 1167313117
AND C.K_TIPOID = 'CRN';


/*Ahora la función anterior retorna f o t, f si no se pudo realizar el pago o t si se realizó satisfactoriamente
Paso siguiente toca insertar datos en la tabla pago de oracle y actualizar el estado de la orden de pago

En caso de que sea una reserva se llama la función PR_ACTUALIZARPAGOSRESERVA(k_reserva, cuenta de origen)
la cuenta de origen se obtiene con la consulta anterior
*/

--prueba
select FU_PAGAR(1380710879,500000);


